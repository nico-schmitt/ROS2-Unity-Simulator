//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.DriverlessMessages
{
    [Serializable]
    public class CanMessageMsg : Message
    {
        public const string k_RosMessageName = "driverless_messages/CanMessage";
        public override string RosMessageName => k_RosMessageName;

        public BuiltinInterfaces.TimeMsg stamp;
        //  content holds the value that is sent
        public double[] content;
        //  content_context defines how the value should be interpreted
        public string[] content_context;
        //  True if the content is a configuration request from the steering wheel
        public bool is_configuration_request;
        //  Can messages mandated by the rules
        //  DV driving dynamics 1
        public const string SPEED_ACTUAL = "SPEED_ACTUAL";
        public const string SPEED_TARGET = "SPEED_TARGET";
        public const string STEERING_ACTUAL = "STEERING_ACTUAL";
        public const string STEERING_TARGET = "STEERING_TARGET";
        public const string BRAKE_HYDR_ACTUAL = "BRAKE_HYDR_ACTUAL";
        public const string BRAKE_HYDR_TARGET = "BRAKE_HYDR_TARGET";
        public const string MOTOR_MOMENT_ACTUAL = "MOTOR_MOMENT_ACTUAL";
        public const string MOTOR_MOMENT_TARGET = "MOTOR_MOMENT_TARGET";
        //  DV driving dynamics 2
        public const string ACCEL_LONGITUDINAL = "ACCEL_LONGITUDINAL";
        public const string ACCEL_LATERAL = "ACCEL_LATERAL";
        public const string YAW_RATE = "YAW_RATE";
        //  DV system status
        public const string AS_STATE = "AS_STATE";
        public const string EBS_STATE = "EBS_STATE";
        public const string AMI_STATE = "AMI_STATE";
        public const string STEERING_STATE = "STEERING_STATE";
        public const string SERVICE_BRAKE_STATE = "SERVICE_BRAKE_STATE";
        public const string LAP_COUNTER = "LAP_COUNTER";
        public const string CONES_COUNT_ACTUAL = "CONES_COUNT_ACTUAL";
        public const string CONES_COUNT_ALL = "CONES_COUNT_ALL";
        //  VCU control messages
        //  From VCU
        public const string MISSION_GO = "MISSION_GO";
        public const string MISSION = "MISSION";
        //  From ACE
        public const string MISSION_GO_ACK = "MISSION_GO_ACK";
        public const string ACE_READY = "ACE_READY";
        public const string MISSION_FINISHED = "MISSION_FINISHED";
        public const string ACE_OK = "ACE_OK";
        public const string ACE_ERROR = "ACE_ERROR";
        public const string MISSION_UNSELECTED = "MISSION_UNSELECTED";
        public const string MISSION_ACCELERATION = "MISSION_ACCELERATION";
        public const string MISSION_SKIDPAD = "MISSION_SKIDPAD";
        public const string MISSION_TRACKDRIVE = "MISSION_TRACKDRIVE";
        public const string MISSION_BRAKETEST = "MISSION_BRAKETEST";
        public const string MISSION_INSPECTION = "MISSION_INSPECTION";
        public const string MISSION_AUTOCROSS = "MISSION_AUTOCROSS";
        public const string MISSION_DYNAMICS_TEST = "MISSION_DYNAMICS_TEST";
        public const string MISSION_MANUAL_DRIVING = "MISSION_MANUAL_DRIVING";
        //  INS Relay from RGX
        public const string INS_VEL_X = "INS_VEL_X";
        public const string INS_VEL_Y = "INS_VEL_Y";
        public const string INS_ANGULAR_VEL_Z = "INS_ANGULAR_VEL_Z";
        public const sbyte MISSION_UNSELECTED_NUMBER = 0;
        public const sbyte MISSION_ACCELERATION_NUMBER = 1;
        public const sbyte MISSION_SKIDPAD_NUMBER = 2;
        public const sbyte MISSION_TRACKDRIVE_NUMBER = 3;
        public const sbyte MISSION_BRAKETEST_NUMBER = 4;
        public const sbyte MISSION_INSPECTION_NUMBER = 5;
        public const sbyte MISSION_AUTOCROSS_NUMBER = 6;
        public const sbyte MISSION_DYNAMICS_TEST_NUMBER = 7;
        public const sbyte MISSION_MANUAL_DRIVING_NUMBER = 15;

        public CanMessageMsg()
        {
            this.stamp = new BuiltinInterfaces.TimeMsg();
            this.content = new double[0];
            this.content_context = new string[0];
            this.is_configuration_request = false;
        }

        public CanMessageMsg(BuiltinInterfaces.TimeMsg stamp, double[] content, string[] content_context, bool is_configuration_request)
        {
            this.stamp = stamp;
            this.content = content;
            this.content_context = content_context;
            this.is_configuration_request = is_configuration_request;
        }

        public static CanMessageMsg Deserialize(MessageDeserializer deserializer) => new CanMessageMsg(deserializer);

        private CanMessageMsg(MessageDeserializer deserializer)
        {
            this.stamp = BuiltinInterfaces.TimeMsg.Deserialize(deserializer);
            deserializer.Read(out this.content, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.content_context, deserializer.ReadLength());
            deserializer.Read(out this.is_configuration_request);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.stamp);
            serializer.WriteLength(this.content);
            serializer.Write(this.content);
            serializer.WriteLength(this.content_context);
            serializer.Write(this.content_context);
            serializer.Write(this.is_configuration_request);
        }

        public override string ToString()
        {
            return "CanMessageMsg: " +
            "\nstamp: " + stamp.ToString() +
            "\ncontent: " + System.String.Join(", ", content.ToList()) +
            "\ncontent_context: " + System.String.Join(", ", content_context.ToList()) +
            "\nis_configuration_request: " + is_configuration_request.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
